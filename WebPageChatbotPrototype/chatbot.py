import random
import json
import pickle
import numpy as np

import nltk
from nltk.stem import WordNetLemmatizer

from tensorflow.keras.models import load_model
from bs4 import BeautifulSoup as bs
import cv2

lemmatizer = WordNetLemmatizer()

el_intents = json.loads(open('HTMLelements.json').read())
loc_intents = json.loads(open('locationintents.json').read())

counter = 0
webpageString = '<!DOCTYPE html> <html> <head> <title>This is generated by web chatbot</title> </head> <body>' \
                '</body> </html> '


el_words = pickle.load(open('words.pkl', 'rb'))
el_classes = pickle.load(open('classes.pkl', 'rb'))
el_model = load_model('chatbotmodel.h5')

loc_words = pickle.load(open('locwords.pkl', 'rb'))
loc_classes = pickle.load(open('locclasses.pkl', 'rb'))
loc_model = load_model('locchatbotmodel.h5')


def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word) for word in sentence_words]
    return sentence_words


def bag_of_words(sentence, _words):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(_words)
    for w in sentence_words:
        for i, word in enumerate(_words):
            if word == w:
                bag[i] = 1
    return np.array(bag)


def predict_el_class(sentence):
    bow = bag_of_words(sentence, el_words)
    res = el_model.predict(np.array([bow]))[0]
    ERROR_THRESHOLD = 0.25
    result = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]

    result.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in result:
        return_list.append({'intent': el_classes[r[0]], 'probability': str(r[1])})
    return return_list


def predict_location_class(sentence):
    bow = bag_of_words(sentence, loc_words)
    res = loc_model.predict(np.array([bow]))[0]
    ERROR_THRESHOLD = 0.99
    result = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
    if len(result) == 0:
        return None
    return loc_classes[result[0][0]]


def get_response(intents_list, intents_json):
    tag = intents_list[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
        if i['tag'] == tag:
            result = random.choice(i['responses'])
            break
    return result


print('BOT IS RUNNING')

while True:
    message = input("")
    if "end" in message:
        break
    i_class = predict_location_class(message)

    ints = predict_el_class(message)
    res = get_response(ints, el_intents)
    res = res.replace("?", str(counter))
    if i_class == "before":
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index = webpageString[:index].rfind('<BEFORE>')
        webpageString = webpageString[:index] + res + webpageString[index:]
    elif i_class == "after":
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index = webpageString.find('<AFTER>', index + 1)
        index += 7
        webpageString = webpageString[:index] + res + webpageString[index:]
    else:
        index = webpageString.find('</body>')
        webpageString = webpageString[:index] + res + webpageString[index:]
    counter += 1

    formattedWebString = webpageString.replace('<AFTER>', '')
    formattedWebString = formattedWebString.replace('<BEFORE>', '')
    formattedWebString = formattedWebString.replace('<CONTENT>', '')

    soup = bs(formattedWebString)
    prettyHTML = soup.prettify()
    image = np.zeros([1024, 900, 1], dtype=np.uint8)
    image.fill(255)
    y0, dy = 50, 20
    for i, line in enumerate(prettyHTML.split('\n')):
        y = y0 + i * dy
        cv2.putText(image, line, (50, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)
    cv2.imshow('Generated HTML code', image)
    cv2.waitKey(0)
    print(res)

cv2.destroyAllWindows()
