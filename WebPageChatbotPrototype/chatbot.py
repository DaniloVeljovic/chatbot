import random
import json
import pickle
import numpy as np

import nltk
from nltk.stem import WordNetLemmatizer

from tensorflow.keras.models import load_model

lemmatizer = WordNetLemmatizer()
intents = json.loads(open('HTMLelements.json').read())
counter = 0
webpageString = '<!DOCTYPE html> <html> <head> <title>This is generated by web chatbot</title> </head> <body> ' \
                '<h1>This is a Heading</h1> ' \
                '<p>This is a paragraph.</p> </body> </html> '

words = pickle.load(open('words.pkl', 'rb'))
classes = pickle.load(open('classes.pkl', 'rb'))
model = load_model('chatbotmodel.h5')


def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word) for word in sentence_words]
    return sentence_words


def bag_of_words(sentence):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(words)
    for w in sentence_words:
        for i, word in enumerate(words):
            if word == w:
                bag[i] = 1
    return np.array(bag)


def predict_class(sentence):
    bow = bag_of_words(sentence)
    res = model.predict(np.array([bow]))[0]
    ERROR_THRESHOLD = 0.25
    result = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]

    result.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in result:
        return_list.append({'intent': classes[r[0]], 'probability': str(r[1])})
    return return_list


def get_response(intents_list, intents_json):
    tag = intents_list[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
        if i['tag'] == tag:
            result = random.choice(i['responses'])
            break
    return result


print('BOT IS RUNNING')

while True:
    message = input("")
    if "end" in message:
        break
    ints = predict_class(message)
    res = get_response(ints, intents)
    res = res.replace("?", str(counter))
    if "content" in message:
        index = message.find('content')
        index += 7
        res = res.replace("<CONTENT>", message[index:])
    if "before" in message:
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index -= 12
        webpageString = webpageString[:index] + res + webpageString[index:]
    elif "after" in message:
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index = webpageString.find('<AFTER>', index + 1)
        index += 7
        webpageString = webpageString[:index] + res + webpageString[index:]
    else:
        index = webpageString.find('</body>')
        webpageString = webpageString[:index] + res + webpageString[index:]
    counter += 1
    print(res)

webpageString = webpageString.replace('<AFTER>', '')
webpageString = webpageString.replace('<BEFORE>', '')
webpageString = webpageString.replace('<CONTENT>', '')
file = open('page.html', 'w')
file.write(webpageString)
file.flush()
