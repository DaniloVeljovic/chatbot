import random
import json
import pickle
import numpy as np

import nltk
from nltk.stem import WordNetLemmatizer

from tensorflow.keras.models import load_model
from bs4 import BeautifulSoup as bs
import cv2
import re

lemmatizer = WordNetLemmatizer()

intents = json.loads(open('elements.json').read())

counter = 0
webpageString = '<!DOCTYPE html> <html> <head> <title>This is generated by web chatbot</title> </head> <body>' \
                '</body> </html> '


words = pickle.load(open('words.pkl', 'rb'))
classes = pickle.load(open('classes.pkl', 'rb'))
model = load_model('chatbotmodel.h5')


def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word) for word in sentence_words]
    return sentence_words


def bag_of_words(sentence, _words):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(_words)
    for w in sentence_words:
        for i, word in enumerate(_words):
            if word == w:
                bag[i] = 1
    return np.array(bag)


def predict_class(sentence):
    bow = bag_of_words(sentence, words)
    res = model.predict(np.array([bow]))[0]
    ERROR_THRESHOLD = 0.94
    result = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]

    #result.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in result:
        return_list.append({'intent': classes[r[0]], 'probability': str(r[1])})
    return return_list


def get_response(intents_list, intents_json):
    tags = []
    for i in intents_list:
        tags.append(i['intent'])
    list_of_intents = intents_json['intents']
    results = []
    for i in list_of_intents:
        for j in tags:
            if i['tag'] == j and i['tag'] != 'before' and i['tag'] != 'after' and i['tag'] != 'inside' and i['tag'] != 'content':
                results.append(i['responses'][0])
                break
    return results


print('BOT IS RUNNING')

while True:
    message = input("")
    if "end" in message:
        break
    #i_class = predict_location_class(message)

    content_counter = 0
    all_contents = re.findall('<[^>]+>', message, re.DOTALL)
    ints = predict_class(re.sub('<[^>]+>', '', message))

    for i in range(len(all_contents)):
        all_contents[i] = all_contents[i].replace('<', '')
        all_contents[i] = all_contents[i].replace('>', '')

    is_content = False
    add_content_only = True

    i_class = None
    for i in ints:
        if i['intent'] == 'content':
            is_content = True
        if i['intent'] == 'before':
            i_class = 'before'
        elif i['intent'] == 'after':
            i_class = 'after'
        elif i['intent'] == 'inside':
            i_class = 'inside'

    res = get_response(ints, intents)
    to_add = ''
    for r in res:
        while r.find("?") != -1:
            i = r.find("?")
            r = r.replace("?", str(counter), 1)
            counter += 1
            if is_content:
                i = r.find('<CONTENT>', i)
                r = r[:i] + all_contents[content_counter] + r[i:]
                content_counter += 1
                add_content_only = False
        to_add += r
    if is_content and add_content_only:
        index = message.find('id')
        index += 3
        element = message[index]
        cont = all_contents[0]
        index = webpageString.find('id = ' + element)
        index = webpageString.find('<CONTENT>', index + 1)
        webpageString = webpageString[:index] + cont + webpageString[index:]
    if i_class == "before":
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index = webpageString[:index].rfind('<BEFORE>')
        webpageString = webpageString[:index] + to_add + webpageString[index:]
    elif i_class == "after":
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index = webpageString.find('<AFTER>', index + 1)
        index += 7
        webpageString = webpageString[:index] + to_add + webpageString[index:]
    elif i_class == "inside":
        index = message.find('id')
        index += 3
        element = message[index]
        index = webpageString.find('id = ' + element)
        index = webpageString.find('<INSIDE>', index + 1)
        webpageString = webpageString[:index] + to_add + webpageString[index:]
    else:
        index = webpageString.find('</body>')
        webpageString = webpageString[:index] + to_add + webpageString[index:]

    formattedWebString = webpageString.replace('<AFTER>', '')
    formattedWebString = formattedWebString.replace('<BEFORE>', '')
    formattedWebString = formattedWebString.replace('<CONTENT>', '')
    formattedWebString = formattedWebString.replace('<INSIDE>', '')

    soup = bs(formattedWebString)
    prettyHTML = soup.prettify()
    image = np.zeros([1024, 900, 1], dtype=np.uint8)
    image.fill(255)
    y0, dy = 20, 10
    for i, line in enumerate(prettyHTML.split('\n')):
        y = y0 + i * dy
        cv2.putText(image, line, (20, y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, 1)
    cv2.imshow('Generated HTML code', image)
    cv2.waitKey(0)
    print(res)

cv2.destroyAllWindows()
